#!/usr/bin/env python
# -*- coding: utf-8; mode: python -*-
r"""Send a string to a specified application and bring the focus back to the calling application.

Usage:
  $ macsendstring <application_name> <string_to_send>

Examples:
  $ macsendstring chrome 'hello, world'
  $ macsendstring iTerm 'echo "hello, world"'

Tested under:
  Mac OS 10.9 (Mavericks) and Python 2.7.5

Note:
  Depending on how slow your computer is, you may have to adjust
  `single_key_wait_time` to some higher value.

Exit status:
  0 = normally executed
  1 = command formatting error
  2 = some error encountered in osascript
  3 = some exception encountered while executing this script

Author: tkykhs
Created on: 2014/04/01
Copyright Â© 2014 tkykhs. All rights reserved.
"""
import os, sys

# Change this to some higher value if your system is slow
single_key_wait_time = '0.001'

keycode_tpl = '  tell application "System Events" to tell process "iTerm" to %s\n  delay ' \
    + single_key_wait_time
command_tpl = """\
/usr/bin/osascript <<EOF
set focusedApp to path to frontmost application as text
tell application "%s"
  activate
%s
end tell
activate application focusedApp
EOF"""

# Full list of keycodes is at:
#   /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/Headers/Events.h
# A comment about \ (0x2A) -
# 0x2A is a correct keycode for \. However, depending on your keyboard layout
# and your system settings, this may render differently.
# TODO: Implement a work-around.
nongraph_keycode_map = { '\n': 0x24, '\t': 0x30, ' ': 0x31, '\\': 0x2A, }
def keypart(c):
  e = nongraph_keycode_map.get(c)
  if e:
    return 'key code %d' % e
  return 'keystroke "%s"' % c.replace('"', '\\"')


if __name__ == '__main__':
  if len(sys.argv) != 3:
    sys.stderr.write('Usage: %s <application_name> <string_to_send>\n' % sys.argv[0])
    sys.exit(1)
  
  try:
    application, s = sys.argv[1], sys.argv[2].strip() + '\n'
    content = '\n'.join( keycode_tpl % keypart(c) for c in s )
    command = command_tpl % (application, content)
    retval = os.system(command)
    sys.exit(retval and 2 or 0)
  except:
    sys.exit(3)
